class Solution {
public:
    int parent[305], size[305];
    void init(int N) {
        for (int i = 0; i <= N; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findParent(int u) {
        if (parent[u] == u) {
            return u;
        } else {
            return parent[u] = findParent(parent[u]);
        }
    }
    void merge(int u, int v) {
        const int parentU = findParent(u), parentV = findParent(v);
        
        if (parent[parentU] != parentV) {
            parent[parentU] = parentV;
            size[parentV] += size[parentU];
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int N = graph.size(), M = initial.size();
        sort(initial.begin(), initial.end());
        init(N);
        
        int answer = initial[0], maxNumber = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (i == j) continue;
                if (graph[i][j]) merge(i, j);
            }
        }
        
        vector<bool> valid(M, true);
        for (int i = 0; i < M; i++) {
            for (int j = i + 1; j < M; j++) {
                const int u = initial[i], v = initial[j];
                
                if (findParent(u) == findParent(v)) {
                    valid[i] = valid[j] = false;
                }
            }
        }
        
        for (int i = M - 1; i >= 0; i--) {
            const int p = initial[i];
            if (!valid[i]) continue;
            
            if (size[findParent(p)] >= maxNumber) {
                maxNumber = size[findParent(p)];
                answer = p;
            }
        }
        return answer;
    }
};