class Solution {
public:
    int parent[305], size[305];
    void init() {
        for (int i = 0; i <= 300; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    void merge(int u, int v) {
        const int parentU = findParent(u), parentV = findParent(v);

        if (parentU != parentV) {
            parent[parentU] = parentV;
            size[parentV] += size[parentU];
        }
    }
    int findParent(int u) {
        if (u == parent[u]) {
            return u;
        } else {
            return parent[u] = findParent(parent[u]);
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        init();

        const int N = graph.size();
        int answer = -1, minAnswer = 999999, currentMin = -1;
        for (int init_number : initial) {
            minAnswer = min(minAnswer, init_number);
        }

        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                if (graph[i][j]) {
                    merge(i, j);
                }
            }
        }

        vector<int> colorCount(N, 0);
        for (int i : initial) {
            colorCount[findParent(i)]++;
        }

        for (int i : initial) {
            if (colorCount[findParent(i)] == 1) {
                if (size[findParent(i)] > currentMin || (size[findParent(i)] == currentMin && i < answer)) {
                    answer = i;
                    currentMin = size[findParent(i)];
                }
            }
        }

        return answer == -1 ? minAnswer : answer;
    }
};