class Solution {
public:
    /**
     * @param graph: the node graph
     * @param initial: the infected node
     * @return: the node index
     */
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
        const int n = graph.size();
        sort(initial.begin(), initial.end());
        
        init();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j]) merge(i, j);
            }
        }
        
        vector<bool> visited(n, false);
        for (int i = 0; i < initial.size(); i++) {
            const int u = initial[i];
            for (int j = i + 1; j < initial.size(); j++) {
                const int v = initial[j];
                
                if (fp(u) == fp(v)) visited[u] = visited[v] = true;
            }
        }
        
        int answer = initial[0], maxAns = 1;
        for (int u : initial) {
            if (visited[u]) continue;
            
            if (size[fp(u)] > maxAns) {
                maxAns = size[fp(u)];
                answer = u;
            }
        }
        return answer;
    }
private:
    int parent[305], size[305];
    void init() {
        for (int i = 0; i <= 300; i++) parent[i] = i, size[i] = 1;
    }
    int fp(int u) {
        if (parent[u] == u) return u;
        else return parent[u] = fp(parent[u]);
    }
    void merge(int u, int v) {
        const int pu = fp(u), pv = fp(v);
        
        if (parent[pu] != pv) {
            parent[pu] = pv;
            size[pv] += size[pu];
        }
    }
};
